--- a/capplets/common/mate-theme-info.c
+++ b/capplets/common/mate-theme-info.c
@@ -14,6 +14,7 @@
 #include <libmate/mate-desktop-item.h>
 #include "mate-theme-info.h"
 #include "gtkrc-utils.h"
+//#include <gtk/gtkthemes.h>
 
 #ifdef HAVE_XCURSOR
 	#include <X11/Xcursor/Xcursor.h>
@@ -1452,42 +1453,82 @@
     *themes = g_list_prepend (*themes, list->data);
 }
 
-gchar *
-gtk_theme_info_missing_engine (const gchar *gtk_theme, gboolean nameOnly)
+gchar* gtk_theme_info_missing_engine(const gchar* gtk_theme, gboolean nameOnly)
 {
-  gchar *engine = NULL;
-  gchar *gtkrc;
-
-  gtkrc = gtkrc_find_named (gtk_theme);
-  if (gtkrc) {
-    GSList *engines = NULL, *l;
-    gboolean found;
-
-    gtkrc_get_details (gtkrc, &engines, NULL);
-    g_free (gtkrc);
-
-    for (l = engines; l; l = l->next) {
-      gchar *full = g_module_build_path (GTK_ENGINE_DIR, l->data);
-
-      found = g_file_test (full, G_FILE_TEST_EXISTS);
-
-      if (!found) {
-        if (nameOnly) {
-          engine = g_strdup (l->data);
-          g_free (full);
-        } else
-          engine = full;
-        break;
-      }
-
-      g_free (full);
-    }
+	//printf("gtk_theme_info_missing_engine()\n");
+	gchar* engine = NULL;
+	gchar* gtkrc;
+
+	gtkrc = gtkrc_find_named(gtk_theme);
+	//printf("gtkrc = %s\n", gtkrc);
+	
+	if (gtkrc)
+	{
+		GSList* engines = NULL;
+		GSList* l;
+   		//gboolean found;
+
+    	gtkrc_get_details(gtkrc, &engines, NULL);
+
+   		g_free(gtkrc);
+
+		for (l = engines; l; l = l->next)
+		{
+			//printf("slist: %s\n", l->data);
+			GtkThemeEngine* a = gtk_theme_engine_get((const gchar*) l->data);
+			
+			if (!a)
+			{
+				//printf("fail\n");
+				//g_free(a);
+				if (nameOnly)
+				{
+         			engine = g_strdup(l->data);
+         			//g_free(full);
+        		}
+        		else
+        		{
+         			engine = g_strdup(l->data);
+        			//engine = full;
+        		}
+        		
+        		break;
+			}
+			//else
+			//{
+				//printf("ok\n");
+			//}
+			
+			
+			/*
+			gchar* full = g_module_build_path(GTK_ENGINE_DIR, l->data);
+			printf("full: %s\n", full);
+
+			found = g_file_test(full, G_FILE_TEST_EXISTS);
+
+			if (!found)
+			{
+				if (nameOnly)
+				{
+         			engine = g_strdup(l->data);
+         			g_free(full);
+        		}
+        		else
+        		{
+        			engine = full;
+        		}
+        		
+        		break;
+        	}
+        	
+        	g_free(full);*/
+        }
 
-    g_slist_foreach (engines, (GFunc) g_free, NULL);
-    g_slist_free (engines);
-  }
+		g_slist_foreach(engines, (GFunc) g_free, NULL);
+		g_slist_free(engines);
+	}
 
-  return engine;
+	return engine;
 }
 
 /* Icon themes */
@@ -1632,51 +1673,57 @@
 	g_free(meta_theme_info);
 }
 
-gboolean
-mate_theme_meta_info_validate (const MateThemeMetaInfo *info, GError **error)
+gboolean mate_theme_meta_info_validate(const MateThemeMetaInfo* info, GError** error)
 {
-  MateThemeInfo *theme;
-  gchar *engine;
+	MateThemeInfo* theme;
+	gchar* engine;
 
-  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
+	g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
-  theme = mate_theme_info_find (info->gtk_theme_name);
-  if (!theme || !theme->has_gtk) {
-    g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_GTK_THEME_NOT_AVAILABLE,
-                 _("This theme will not look as intended because the required GTK+ theme '%s' is not installed."),
-                 info->gtk_theme_name);
-    return FALSE;
-  }
+	theme = mate_theme_info_find (info->gtk_theme_name);
+	
+	if (!theme || !theme->has_gtk)
+	{
+		g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_GTK_THEME_NOT_AVAILABLE,
+			_("This theme will not look as intended because the required GTK+ theme '%s' is not installed."),
+			info->gtk_theme_name);
+		return FALSE;
+	}
 
-  theme = mate_theme_info_find (info->marco_theme_name);
-  if (!theme || !theme->has_marco) {
-    g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_WM_THEME_NOT_AVAILABLE,
-                 _("This theme will not look as intended because the required window manager theme '%s' is not installed."),
-                 info->marco_theme_name);
-    return FALSE;
-  }
+	theme = mate_theme_info_find (info->marco_theme_name);
+	
+	if (!theme || !theme->has_marco)
+	{
+		g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_WM_THEME_NOT_AVAILABLE,
+			_("This theme will not look as intended because the required window manager theme '%s' is not installed."),
+			info->marco_theme_name);
+		return FALSE;
+	}
 
-  if (!mate_theme_icon_info_find (info->icon_theme_name)) {
-    g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_ICON_THEME_NOT_AVAILABLE,
-                 _("This theme will not look as intended because the required icon theme '%s' is not installed."),
-                 info->icon_theme_name);
-    return FALSE;
-  }
+	if (!mate_theme_icon_info_find (info->icon_theme_name))
+	{
+		g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_ICON_THEME_NOT_AVAILABLE,
+			_("This theme will not look as intended because the required icon theme '%s' is not installed."),
+			info->icon_theme_name);
+		return FALSE;
+	}
 
-  /* check for gtk theme engines */
-  engine = gtk_theme_info_missing_engine (info->gtk_theme_name, TRUE);
-  if (engine != NULL) {
-    g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_GTK_ENGINE_NOT_AVAILABLE,
-                 _("This theme will not look as intended because the required GTK+ theme engine '%s' is not installed."),
-                 engine);
-    g_free (engine);
-    return FALSE;
-  }
+	/* check for gtk theme engines */
+	engine = gtk_theme_info_missing_engine(info->gtk_theme_name, TRUE);
 
-  return TRUE;
+	if (engine != NULL)
+	{
+		g_set_error (error, MATE_THEME_ERROR, MATE_THEME_ERROR_GTK_ENGINE_NOT_AVAILABLE,
+			_("This theme will not look as intended because the required GTK+ theme engine '%s' is not installed."),
+			engine);
+		g_free (engine);
+		return FALSE;
+	}
+
+	return TRUE;
 }
 
-MateThemeMetaInfo* mate_theme_meta_info_find(const char *meta_theme_name)
+MateThemeMetaInfo* mate_theme_meta_info_find(const char* meta_theme_name)
 {
 	g_return_val_if_fail(meta_theme_name != NULL, NULL);
 
